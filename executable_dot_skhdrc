# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# focus window
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - k : yabai -m window --focus north
alt - j : yabai -m window --focus south

# swap managed window
shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
shift + ctrl + cmd - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + ctrl + cmd - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + ctrl + cmd - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + ctrl + cmd - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + ctrl + cmd - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + ctrl + cmd - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + ctrl + cmd - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + ctrl + cmd - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + ctrl + cmd - 9 : yabai -m window --space 9; yabai -m space --focus 9

# focus space
# cmd + alt - x : yabai -m space --focus recent
ctrl + cmd - 1 : yabai -m space --focus 1 || skhd -k "ctrl + alt + cmd - 1"
ctrl + cmd - 2 : yabai -m space --focus 2 || skhd -k "ctrl + alt + cmd - 2"
ctrl + cmd - 3 : yabai -m space --focus 3 || skhd -k "ctrl + alt + cmd - 3"
ctrl + cmd - 4 : yabai -m space --focus 4 || skhd -k "ctrl + alt + cmd - 4"
ctrl + cmd - 5 : yabai -m space --focus 5 || skhd -k "ctrl + alt + cmd - 5"
ctrl + cmd - 6 : yabai -m space --focus 6 || skhd -k "ctrl + alt + cmd - 6"
ctrl + cmd - 7 : yabai -m space --focus 7 || skhd -k "ctrl + alt + cmd - 7"
ctrl + cmd - 8 : yabai -m space --focus 8 || skhd -k "ctrl + alt + cmd - 8"
ctrl + cmd - 9 : yabai -m space --focus 9 || skhd -k "ctrl + alt + cmd - 9"
ctrl + cmd - 0 : yabai -m space --focus 10 || skhd -k "ctrl + alt + cmd - 10"

# ctrl + cmd - 1 : skhd -k "ctrl + alt + cmd - 1"
# ctrl + cmd - 2 : skhd -k "ctrl + alt + cmd - 2"
# ctrl + cmd - 3 : skhd -k "ctrl + alt + cmd - 3"
# ctrl + cmd - 4 : skhd -k "ctrl + alt + cmd - 4"
# ctrl + cmd - 5 : skhd -k "ctrl + alt + cmd - 5"
# ctrl + cmd - 6 : skhd -k "ctrl + alt + cmd - 6"
# ctrl + cmd - 7 : skhd -k "ctrl + alt + cmd - 7"
# ctrl + cmd - 8 : skhd -k "ctrl + alt + cmd - 8"
# ctrl + cmd - 9 : skhd -k "ctrl + alt + cmd - 9"
# ctrl + cmd - 0 : skhd -k "ctrl + alt + cmd - 10"

# ctrl + alt + cmd - 1 : yabai -m space --focus 11
# ctrl + alt + cmd - 2 : yabai -m space --focus 12
# ctrl + alt + cmd - 3 : yabai -m space --focus 13
# ctrl + alt + cmd - 4 : yabai -m space --focus 14
# ctrl + alt + cmd - 5 : yabai -m space --focus 15
# ctrl + alt + cmd - 6 : yabai -m space --focus 16
# ctrl + alt + cmd - 7 : yabai -m space --focus 17
# ctrl + alt + cmd - 8 : yabai -m space --focus 18
# ctrl + alt + cmd - 9 : yabai -m space --focus 19

# shift + alt + cmd - 1 : yabai -m window --space 11; yabai -m space --focus 11
# shift + alt + cmd - 2 : yabai -m window --space 12; yabai -m space --focus 12
# shift + alt + cmd - 3 : yabai -m window --space 13; yabai -m space --focus 13
# shift + alt + cmd - 4 : yabai -m window --space 14; yabai -m space --focus 14
# shift + alt + cmd - 5 : yabai -m window --space 15; yabai -m space --focus 15
# shift + alt + cmd - 6 : yabai -m window --space 16; yabai -m space --focus 16
# shift + alt + cmd - 7 : yabai -m window --space 16; yabai -m space --focus 17
# shift + alt + cmd - 8 : yabai -m window --space 16; yabai -m space --focus 18
# shift + alt + cmd - 9 : yabai -m window --space 16; yabai -m space --focus 19


# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
ctrl + alt - 1  : yabai -m display --focus 1
ctrl + alt - 2  : yabai -m display --focus 2

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# ctrl + cmd - h : yabai -m window --resize left:-20:0
# ctrl + cmd - l : yabai -m window --resize right:20:0
# ctrl + shift + cmd - l : yabai -m window --resize left:20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# 左にリサイズ（幅を狭める）
ctrl + cmd - h : yabai -m window --resize left:-20:0; yabai -m window --resize right:-20:0
# 右にリサイズ（幅を広げる）
ctrl + cmd - l : yabai -m window --resize right:20:0; yabai -m window --resize left:20:0
# 上にリサイズ（高さを狭める）
ctrl + cmd - k : yabai -m window --resize top:0:-20; yabai -m window --resize bottom:0:-20
# 下にリサイズ（高さを広げる）
ctrl + cmd - j : yabai -m window --resize bottom:0:20; yabai -m window --resize top:0:20

# 代替の上下リサイズ方法（必要に応じて）
# ctrl + cmd - k : yabai -m window --resize top:0:-20
# ctrl + cmd - j : yabai -m window --resize bottom:0:20

# decrease window size
# ctrl + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

shift + alt - t : yabai -m window --toggle border

alt + cmd - t : yabai -m window --toggle float;

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
